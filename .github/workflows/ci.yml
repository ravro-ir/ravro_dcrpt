name: CI - Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-quick-linux:
    name: Quick Build (Linux)
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libgl1-mesa-dev \
            xorg-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libssl-dev \
            pkg-config

      - name: Install Go dependencies
        run: |
          go mod download

      - name: Build GUI
        run: |
          CGO_ENABLED=1 go build -o build/ravro_dcrpt_gui ./cmd/gui

      - name: Verify GUI binary exists
        run: |
          ls -lh build/ravro_dcrpt_gui

  build-quick-macos:
    name: Quick Build (macOS)
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: amd64
          - os: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install macOS dependencies
        run: |
          # Install OpenSSL
          if ! brew list openssl@3 &>/dev/null; then
            brew install openssl@3
          else
            echo "OpenSSL@3 is already installed"
          fi

      - name: Set OpenSSL environment (Intel)
        if: matrix.arch == 'amd64'
        run: |
          OPENSSL_PREFIX="/usr/local/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Set OpenSSL environment (Apple Silicon)
        if: matrix.arch == 'arm64'
        run: |
          OPENSSL_PREFIX="/opt/homebrew/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Install Go dependencies
        run: |
          go mod download

      - name: Build GUI
        run: |
          CGO_ENABLED=1 go build -o build/ravro_dcrpt_gui-${{ matrix.arch }} ./cmd/gui

      - name: Verify GUI binary exists
        run: |
          ls -lh build/ravro_dcrpt_gui-${{ matrix.arch }}

  build-quick-windows:
    name: Quick Build (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Windows dependencies
        shell: powershell
        run: |
          choco install -y openssl
          choco install -y wkhtmltopdf

      - name: Debug OpenSSL installation
        shell: powershell
        run: |
          Write-Host "=== Searching for OpenSSL installation ==="
          
          # Check common locations
          $locations = @(
            "C:/Program Files/OpenSSL-Win64",
            "C:/Program Files/OpenSSL",
            "C:/OpenSSL-Win64",
            "C:/OpenSSL"
          )
          
          foreach ($loc in $locations) {
            if (Test-Path $loc) {
              Write-Host "Found: $loc"
              Write-Host "Directory structure:"
              Get-ChildItem -Path $loc -Recurse -Depth 2 | Select-Object FullName
            }
          }
          
          # Check if openssl is in PATH
          Write-Host "`n=== OpenSSL command check ==="
          try {
            $opensslPath = Get-Command openssl -ErrorAction Stop
            Write-Host "OpenSSL executable: $($opensslPath.Source)"
          } catch {
            Write-Host "OpenSSL not found in PATH"
          }

      - name: Set up environment variables
        shell: powershell
        run: |
          # Find OpenSSL installation directory
          $OPENSSL_FULL = "C:/Program Files/OpenSSL-Win64"
          $OPENSSL_SHORT = "C:/PROGRA~1/OpenSSL-Win64"
          
          # Check which path exists
          if (Test-Path "$OPENSSL_FULL") {
            $OPENSSL_DIR = $OPENSSL_FULL
            Write-Host "Found OpenSSL at: $OPENSSL_FULL"
          } elseif (Test-Path "$OPENSSL_SHORT") {
            $OPENSSL_DIR = $OPENSSL_SHORT
            Write-Host "Found OpenSSL at: $OPENSSL_SHORT"
          } else {
            Write-Host "OpenSSL not found in expected locations!"
            exit 1
          }
          
          # Check for lib directory structure
          if (Test-Path "$OPENSSL_DIR/lib/VC/x64/MD") {
            $LIB_PATH = "$OPENSSL_DIR/lib/VC/x64/MD"
            Write-Host "Using VC lib path: $LIB_PATH"
          } elseif (Test-Path "$OPENSSL_DIR/lib") {
            $LIB_PATH = "$OPENSSL_DIR/lib"
            Write-Host "Using standard lib path: $LIB_PATH"
          } else {
            Write-Host "OpenSSL lib directory not found!"
            exit 1
          }
          
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $env:GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_DIR/include" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=-L$LIB_PATH -lssl -lcrypto -lws2_32 -lcrypt32" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$OPENSSL_DIR/bin" >> $env:GITHUB_PATH
          echo "C:/Program Files/wkhtmltopdf/bin" >> $env:GITHUB_PATH

      - name: Install Go dependencies
        run: |
          go mod download

      - name: Build GUI
        shell: powershell
        run: |
          $env:CGO_ENABLED = "1"
          go build -o build/ravro_dcrpt_gui.exe ./cmd/gui

      - name: Verify GUI binary exists
        shell: powershell
        run: |
          Get-ChildItem build/ravro_dcrpt_gui.exe

