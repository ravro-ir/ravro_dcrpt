name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.0.0)'
        required: false
        default: 'dev'

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libgl1-mesa-dev \
            xorg-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libxxf86vm-dev \
            libssl-dev \
            pkg-config \
            wkhtmltopdf

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Linux
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui \
          ./cmd/gui

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-linux-amd64.tar.gz ravro_dcrpt_gui
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: build/ravro_dcrpt-linux-amd64.tar.gz
          retention-days: 7

  build-macos:
    name: Build macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: amd64
          - os: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install macOS dependencies
        run: |
          # Install OpenSSL
          if ! brew list openssl@3 &>/dev/null; then
            brew install openssl@3
          else
            echo "OpenSSL@3 is already installed"
          fi
          
          # Install wkhtmltopdf
          if ! command -v wkhtmltopdf &> /dev/null; then
            brew install --cask wkhtmltopdf || {
              echo "Cask install failed, trying direct download..."
              WKHTMLTOPDF_VERSION="0.12.6-1"
              DOWNLOAD_URL="https://github.com/wkhtmltopdf/packaging/releases/download/${WKHTMLTOPDF_VERSION}/wkhtmltox-${WKHTMLTOPDF_VERSION}.macos-cocoa.pkg"
              curl -L -o /tmp/wkhtmltox.pkg "$DOWNLOAD_URL"
              sudo installer -pkg /tmp/wkhtmltox.pkg -target /
              rm -f /tmp/wkhtmltox.pkg
            }
          fi

      - name: Set OpenSSL environment variables (Intel)
        if: matrix.arch == 'amd64'
        run: |
          OPENSSL_PREFIX="/usr/local/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Set OpenSSL environment variables (Apple Silicon)
        if: matrix.arch == 'arm64'
        run: |
          OPENSSL_PREFIX="/opt/homebrew/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for macOS
        run: |
          CGO_ENABLED=1 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui-${{ matrix.arch }} \
          ./cmd/gui

      - name: Create app bundle (for GUI)
        run: |
          mkdir -p "build/Ravro Decryption Tool.app/Contents/MacOS"
          mkdir -p "build/Ravro Decryption Tool.app/Contents/Resources"
          
          cp build/ravro_dcrpt_gui-${{ matrix.arch }} "build/Ravro Decryption Tool.app/Contents/MacOS/ravro_dcrpt_gui"
          
          # Create Info.plist
          cat > "build/Ravro Decryption Tool.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>ravro_dcrpt_gui</string>
              <key>CFBundleIdentifier</key>
              <string>com.ravro.decryption</string>
              <key>CFBundleName</key>
              <string>Ravro Decryption Tool</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>2.0.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>11.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz \
            "Ravro Decryption Tool.app"
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: build/ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz
          retention-days: 7

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Windows dependencies
        shell: powershell
        run: |
          # Install Chocolatey packages
          choco install -y openssl
          choco install -y wkhtmltopdf
          
          # Verify installations
          Write-Host "Checking OpenSSL..."
          Get-Command openssl
          
          Write-Host "Checking wkhtmltopdf..."
          Get-Command wkhtmltopdf

      - name: Set up environment variables
        shell: powershell
        run: |
          # Set OpenSSL paths
          $OPENSSL_DIR = "C:\Program Files\OpenSSL-Win64"
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $env:GITHUB_ENV
          
          # Set CGO flags for OpenSSL
          $CGO_CFLAGS = "-I`"$OPENSSL_DIR\include`""
          $CGO_LDFLAGS = "-L`"$OPENSSL_DIR\lib`" -lssl -lcrypto"
          echo "CGO_CFLAGS=$CGO_CFLAGS" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=$CGO_LDFLAGS" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$OPENSSL_DIR\bin" >> $env:GITHUB_PATH
          echo "C:\Program Files\wkhtmltopdf\bin" >> $env:GITHUB_PATH

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Windows
        shell: powershell
        run: |
          $env:CGO_ENABLED = "1"
          go build -ldflags="-s -w -H windowsgui" -o build/ravro_dcrpt_gui.exe ./cmd/gui

      - name: Copy runtime DLLs
        shell: powershell
        run: |
          # Create build directory if not exists
          New-Item -ItemType Directory -Force -Path build
          
          # Copy OpenSSL DLLs
          if (Test-Path "C:\Program Files\OpenSSL-Win64\bin\libssl-3-x64.dll") {
            Copy-Item "C:\Program Files\OpenSSL-Win64\bin\libssl-3-x64.dll" build/
            Copy-Item "C:\Program Files\OpenSSL-Win64\bin\libcrypto-3-x64.dll" build/
          }
          
          # Copy any local DLLs from lib/ if they exist
          if (Test-Path "lib\*.dll") {
            Copy-Item lib\*.dll build\
          }

      - name: Create zip archive
        shell: powershell
        run: |
          Compress-Archive -Path build\ravro_dcrpt_gui.exe, build\*.dll -DestinationPath build\ravro_dcrpt-windows-amd64.zip -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: build/ravro_dcrpt-windows-amd64.zip
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/linux-amd64/*.tar.gz
            artifacts/macos-amd64/*.tar.gz
            artifacts/macos-arm64/*.tar.gz
            artifacts/windows-amd64/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

