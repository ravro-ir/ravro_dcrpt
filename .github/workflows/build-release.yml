name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.0.0)'
        required: false
        default: 'dev'

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libgl1-mesa-dev \
            xorg-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libxxf86vm-dev \
            libssl-dev \
            pkg-config \
            wkhtmltopdf \
            fuse \
            libfuse2 \
            file \
            desktop-file-utils

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Linux
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui \
          ./cmd/gui

      - name: Create desktop file
        run: |
          mkdir -p build/appimage
          cat > build/appimage/ravro-decryption-tool.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=Ravro Decryption Tool
          Comment=Decrypt and manage Ravro encrypted files
          Exec=ravro_dcrpt_gui
          Icon=ravro-decryption-tool
          Terminal=false
          Categories=Utility;Security;
          EOF

      - name: Create AppImage icon
        run: |
          # Create a simple PNG icon (you should replace this with your actual icon)
          mkdir -p build/appimage
          # Using a placeholder - you should add your actual icon to the repo
          if [ -f "assets/icon.png" ]; then
            cp assets/icon.png build/appimage/ravro-decryption-tool.png
          else
            # Create a placeholder icon
            echo "Creating placeholder icon..."
            convert -size 256x256 xc:blue -fill white -pointsize 72 -gravity center \
              -annotate +0+0 "R" build/appimage/ravro-decryption-tool.png 2>/dev/null || \
            echo "Icon creation skipped (imagemagick not available)"
          fi

      - name: Download appimagetool
        run: |
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool

      - name: Create AppImage structure
        run: |
          mkdir -p build/AppDir/usr/bin
          mkdir -p build/AppDir/usr/share/applications
          mkdir -p build/AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy binary
          cp build/ravro_dcrpt_gui build/AppDir/usr/bin/
          
          # Copy desktop file
          cp build/appimage/ravro-decryption-tool.desktop build/AppDir/usr/share/applications/
          
          # Copy icon if exists
          if [ -f "build/appimage/ravro-decryption-tool.png" ]; then
            cp build/appimage/ravro-decryption-tool.png build/AppDir/usr/share/icons/hicolor/256x256/apps/
            cp build/appimage/ravro-decryption-tool.png build/AppDir/ravro-decryption-tool.png
          fi
          
          # Create AppRun
          cat > build/AppDir/AppRun << 'APPRUN_EOF'
          #!/bin/bash
          SELF=$(readlink -f "$0")
          HERE=${SELF%/*}
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/ravro_dcrpt_gui" "$@"
          APPRUN_EOF
          
          chmod +x build/AppDir/AppRun

      - name: Build AppImage
        run: |
          ARCH=x86_64 ./appimagetool build/AppDir build/Ravro_Decryption_Tool-x86_64.AppImage
        env:
          NO_APPSTREAM: 1

      - name: Create DEB package structure
        run: |
          mkdir -p build/deb/ravro-decryption-tool-amd64/DEBIAN
          mkdir -p build/deb/ravro-decryption-tool-amd64/usr/bin
          mkdir -p build/deb/ravro-decryption-tool-amd64/usr/share/applications
          mkdir -p build/deb/ravro-decryption-tool-amd64/usr/share/icons/hicolor/256x256/apps
          mkdir -p build/deb/ravro-decryption-tool-amd64/usr/share/doc/ravro-decryption-tool
          
          # Get version from git tag or use default
          VERSION="${GITHUB_REF_NAME#v}"
          if [ -z "$VERSION" ] || [ "$VERSION" = "$GITHUB_REF_NAME" ]; then
            VERSION="1.0.0"
          fi
          
          # Create control file
          cat > build/deb/ravro-decryption-tool-amd64/DEBIAN/control << EOF
          Package: ravro-decryption-tool
          Version: ${VERSION}
          Section: utils
          Priority: optional
          Architecture: amd64
          Depends: libc6, libgl1, libx11-6, libssl3
          Maintainer: Ravro Team <support@ravro.ir>
          Description: Ravro Decryption Tool
           A GUI application for decrypting and managing Ravro encrypted files.
           This tool provides an easy-to-use interface for working with
           encrypted data and generating reports.
          EOF
          
          # Copy binary
          cp build/ravro_dcrpt_gui build/deb/ravro-decryption-tool-amd64/usr/bin/
          chmod 755 build/deb/ravro-decryption-tool-amd64/usr/bin/ravro_dcrpt_gui
          
          # Copy desktop file
          cp build/appimage/ravro-decryption-tool.desktop build/deb/ravro-decryption-tool-amd64/usr/share/applications/
          
          # Copy icon if exists
          if [ -f "build/appimage/ravro-decryption-tool.png" ]; then
            cp build/appimage/ravro-decryption-tool.png build/deb/ravro-decryption-tool-amd64/usr/share/icons/hicolor/256x256/apps/
          fi
          
          # Create copyright file
          cat > build/deb/ravro-decryption-tool-amd64/usr/share/doc/ravro-decryption-tool/copyright << 'EOF'
          Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
          Upstream-Name: ravro-decryption-tool
          Source: https://github.com/ravro-ir/ravro_dcrpt
          
          Files: *
          Copyright: 2024 Ravro Team
          License: Proprietary
          EOF

      - name: Build DEB package
        run: |
          dpkg-deb --build build/deb/ravro-decryption-tool-amd64
          mv build/deb/ravro-decryption-tool-amd64.deb build/ravro-decryption-tool-amd64.deb

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-linux-amd64.tar.gz ravro_dcrpt_gui
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: |
            build/ravro_dcrpt-linux-amd64.tar.gz
            build/Ravro_Decryption_Tool-x86_64.AppImage
            build/ravro-decryption-tool-amd64.deb
          retention-days: 7

  build-macos:
    name: Build macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: amd64
          - os: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install macOS dependencies
        run: |
          # Install OpenSSL
          if ! brew list openssl@3 &>/dev/null; then
            brew install openssl@3
          else
            echo "OpenSSL@3 is already installed"
          fi
          
          # Install wkhtmltopdf
          if ! command -v wkhtmltopdf &> /dev/null; then
            brew install --cask wkhtmltopdf || {
              echo "Cask install failed, trying direct download..."
              WKHTMLTOPDF_VERSION="0.12.6-1"
              DOWNLOAD_URL="https://github.com/wkhtmltopdf/packaging/releases/download/${WKHTMLTOPDF_VERSION}/wkhtmltox-${WKHTMLTOPDF_VERSION}.macos-cocoa.pkg"
              curl -L -o /tmp/wkhtmltox.pkg "$DOWNLOAD_URL"
              sudo installer -pkg /tmp/wkhtmltox.pkg -target /
              rm -f /tmp/wkhtmltox.pkg
            }
          fi

      - name: Set OpenSSL environment variables (Intel)
        if: matrix.arch == 'amd64'
        run: |
          OPENSSL_PREFIX="/usr/local/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Set OpenSSL environment variables (Apple Silicon)
        if: matrix.arch == 'arm64'
        run: |
          OPENSSL_PREFIX="/opt/homebrew/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for macOS
        run: |
          CGO_ENABLED=1 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui-${{ matrix.arch }} \
          ./cmd/gui

      - name: Create app bundle (for GUI)
        run: |
          mkdir -p "build/Ravro Decryption Tool.app/Contents/MacOS"
          mkdir -p "build/Ravro Decryption Tool.app/Contents/Resources"
          
          cp build/ravro_dcrpt_gui-${{ matrix.arch }} "build/Ravro Decryption Tool.app/Contents/MacOS/ravro_dcrpt_gui"
          
          # Create Info.plist
          cat > "build/Ravro Decryption Tool.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>ravro_dcrpt_gui</string>
              <key>CFBundleIdentifier</key>
              <string>com.ravro.decryption</string>
              <key>CFBundleName</key>
              <string>Ravro Decryption Tool</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>2.0.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>11.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz \
            "Ravro Decryption Tool.app"
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: build/ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz
          retention-days: 7

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Windows dependencies
        shell: powershell
        run: |
          # Install wkhtmltopdf
          choco install -y wkhtmltopdf
          
          # Install OpenSSL (64-bit only)
          Write-Host "Installing OpenSSL via Chocolatey..."
          choco install -y openssl
          
          # Check common installation paths
          $OPENSSL_PATHS = @(
            "C:\Program Files\OpenSSL-Win64",
            "C:\Program Files\OpenSSL",
            "C:\OpenSSL-Win64",
            "C:\OpenSSL"
          )
          
          $OPENSSL_FOUND = $false
          $ACTUAL_OPENSSL_DIR = ""
          
          foreach ($path in $OPENSSL_PATHS) {
            if (Test-Path $path) {
              Write-Host "✅ Found OpenSSL at: $path"
              $ACTUAL_OPENSSL_DIR = $path
              $OPENSSL_FOUND = $true
              break
            }
          }
          
          if (-not $OPENSSL_FOUND) {
            Write-Host "Searching for OpenSSL in Program Files..."
            $found = Get-ChildItem "C:\Program Files" -Directory -Filter "*OpenSSL*" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $ACTUAL_OPENSSL_DIR = $found.FullName
              Write-Host "✅ Found OpenSSL at: $ACTUAL_OPENSSL_DIR"
              $OPENSSL_FOUND = $true
            }
          }
          
          if (-not $OPENSSL_FOUND) {
            Write-Host "❌ Failed to find OpenSSL installation"
            exit 1
          }
          
          # Create junction to C:\OpenSSL-Win64 if needed
          if ($ACTUAL_OPENSSL_DIR -ne "C:\OpenSSL-Win64") {
            if (-not (Test-Path "C:\OpenSSL-Win64")) {
              Write-Host "Creating junction from C:\OpenSSL-Win64 to $ACTUAL_OPENSSL_DIR"
              New-Item -ItemType Junction -Path "C:\OpenSSL-Win64" -Target $ACTUAL_OPENSSL_DIR -Force | Out-Null
              Write-Host "✅ Junction created"
            }
          }
          
          Write-Host "✅ OpenSSL ready"

      - name: Set up environment variables
        shell: powershell
        run: |
          # Set OpenSSL directory (64-bit)
          $OPENSSL_DIR = "C:\OpenSSL-Win64"
          
          if (-not (Test-Path "$OPENSSL_DIR")) {
            Write-Host "❌ OpenSSL directory not found: $OPENSSL_DIR"
            exit 1
          }
          
          # Find lib directory structure
          if (Test-Path "$OPENSSL_DIR/lib/VC/x64/MD") {
            $LIB_PATH = "$OPENSSL_DIR/lib/VC/x64/MD"
          } elseif (Test-Path "$OPENSSL_DIR/lib/VC") {
            $LIB_PATH = "$OPENSSL_DIR/lib/VC"
          } elseif (Test-Path "$OPENSSL_DIR/lib") {
            $LIB_PATH = "$OPENSSL_DIR/lib"
          } else {
            Write-Host "❌ OpenSSL lib directory not found!"
            exit 1
          }
          
          Write-Host "✅ Using OpenSSL lib path: $LIB_PATH"
          
          # Set environment variables
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $env:GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_DIR/include" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=-L$LIB_PATH -lssl -lcrypto -lws2_32 -lcrypt32" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$OPENSSL_DIR/bin" >> $env:GITHUB_PATH
          echo "C:/Program Files/wkhtmltopdf/bin" >> $env:GITHUB_PATH

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Windows
        shell: powershell
        run: |
          $env:CGO_ENABLED = "1"
          go build -ldflags="-s -w -H windowsgui" -o build/ravro_dcrpt_gui.exe ./cmd/gui

      - name: Copy runtime DLLs
        shell: powershell
        run: |
          # Create build directory if not exists
          New-Item -ItemType Directory -Force -Path build
          
          # Copy OpenSSL DLLs (64-bit)
          $OPENSSL_BIN = "C:\OpenSSL-Win64\bin"
          if (Test-Path "$OPENSSL_BIN\libssl-3-x64.dll") {
            Copy-Item "$OPENSSL_BIN\libssl-3-x64.dll" build/
            Copy-Item "$OPENSSL_BIN\libcrypto-3-x64.dll" build/
            Write-Host "✅ Copied OpenSSL DLLs"
          } elseif (Test-Path "$OPENSSL_BIN\libssl-3.dll") {
            Copy-Item "$OPENSSL_BIN\libssl-3.dll" build/
            Copy-Item "$OPENSSL_BIN\libcrypto-3.dll" build/
            Write-Host "✅ Copied OpenSSL DLLs"
          } else {
            Write-Host "⚠️ OpenSSL DLLs not found"
          }
          
          # Copy any local DLLs from lib/ if they exist
          if (Test-Path "lib\*.dll") {
            Copy-Item lib\*.dll build\
          }

      - name: Create zip archive
        shell: powershell
        run: |
          # Include all files in build directory
          $files = @("build\ravro_dcrpt_gui.exe")
          if (Test-Path "build\*.dll") {
            $files += Get-ChildItem "build\*.dll" | ForEach-Object { $_.FullName }
          }
          
          Compress-Archive -Path $files -DestinationPath "build\ravro_dcrpt-windows-amd64.zip" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: build/ravro_dcrpt-windows-amd64.zip
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/linux-amd64/*.tar.gz
            artifacts/linux-amd64/*.AppImage
            artifacts/linux-amd64/*.deb
            artifacts/macos-amd64/*.tar.gz
            artifacts/macos-arm64/*.tar.gz
            artifacts/windows-amd64/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

