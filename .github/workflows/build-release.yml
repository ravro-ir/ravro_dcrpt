name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v2.0.0)'
        required: false
        default: 'dev'

permissions:
  contents: write

jobs:
  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc \
            libgl1-mesa-dev \
            xorg-dev \
            libx11-dev \
            libxcursor-dev \
            libxrandr-dev \
            libxinerama-dev \
            libxi-dev \
            libxxf86vm-dev \
            libssl-dev \
            pkg-config \
            wkhtmltopdf

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Linux
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui \
          ./cmd/gui

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-linux-amd64.tar.gz ravro_dcrpt_gui
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: build/ravro_dcrpt-linux-amd64.tar.gz
          retention-days: 7

  build-macos:
    name: Build macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            arch: amd64
          - os: macos-latest
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install macOS dependencies
        run: |
          # Install OpenSSL
          if ! brew list openssl@3 &>/dev/null; then
            brew install openssl@3
          else
            echo "OpenSSL@3 is already installed"
          fi
          
          # Install wkhtmltopdf
          if ! command -v wkhtmltopdf &> /dev/null; then
            brew install --cask wkhtmltopdf || {
              echo "Cask install failed, trying direct download..."
              WKHTMLTOPDF_VERSION="0.12.6-1"
              DOWNLOAD_URL="https://github.com/wkhtmltopdf/packaging/releases/download/${WKHTMLTOPDF_VERSION}/wkhtmltox-${WKHTMLTOPDF_VERSION}.macos-cocoa.pkg"
              curl -L -o /tmp/wkhtmltox.pkg "$DOWNLOAD_URL"
              sudo installer -pkg /tmp/wkhtmltox.pkg -target /
              rm -f /tmp/wkhtmltox.pkg
            }
          fi

      - name: Set OpenSSL environment variables (Intel)
        if: matrix.arch == 'amd64'
        run: |
          OPENSSL_PREFIX="/usr/local/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Set OpenSSL environment variables (Apple Silicon)
        if: matrix.arch == 'arm64'
        run: |
          OPENSSL_PREFIX="/opt/homebrew/opt/openssl@3"
          echo "PKG_CONFIG_PATH=$OPENSSL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_PREFIX/include" >> $GITHUB_ENV
          echo "CGO_LDFLAGS=-L$OPENSSL_PREFIX/lib -lssl -lcrypto" >> $GITHUB_ENV

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for macOS
        run: |
          CGO_ENABLED=1 \
          go build -ldflags="-s -w" \
          -o build/ravro_dcrpt_gui-${{ matrix.arch }} \
          ./cmd/gui

      - name: Create app bundle (for GUI)
        run: |
          mkdir -p "build/Ravro Decryption Tool.app/Contents/MacOS"
          mkdir -p "build/Ravro Decryption Tool.app/Contents/Resources"
          
          cp build/ravro_dcrpt_gui-${{ matrix.arch }} "build/Ravro Decryption Tool.app/Contents/MacOS/ravro_dcrpt_gui"
          
          # Create Info.plist
          cat > "build/Ravro Decryption Tool.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>ravro_dcrpt_gui</string>
              <key>CFBundleIdentifier</key>
              <string>com.ravro.decryption</string>
              <key>CFBundleName</key>
              <string>Ravro Decryption Tool</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>CFBundleShortVersionString</key>
              <string>2.0.0</string>
              <key>CFBundleVersion</key>
              <string>1</string>
              <key>LSMinimumSystemVersion</key>
              <string>11.0</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF

      - name: Create tarball
        run: |
          cd build
          tar -czf ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz \
            "Ravro Decryption Tool.app"
          cd ..

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.arch }}
          path: build/ravro_dcrpt-darwin-${{ matrix.arch }}.tar.gz
          retention-days: 7

  build-windows:
    name: Build Windows (${{ matrix.arch }})
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - arch: amd64
            goarch: amd64
            mingw: mingw64
            openssl_url_prefix: Win64OpenSSL
            openssl_dir: C:\OpenSSL-Win64
          - arch: 386
            goarch: 386
            mingw: mingw32
            openssl_url_prefix: Win32OpenSSL
            openssl_dir: C:\OpenSSL-Win32
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache: true

      - name: Install MinGW for ${{ matrix.arch }}
        shell: powershell
        run: |
          if ("${{ matrix.arch }}" -eq "386") {
            Write-Host "Installing MinGW 32-bit..."
            choco install -y mingw --forcex86 --force
            
            # Find MinGW 32-bit installation
            $MINGW_PATHS = @(
              "C:\ProgramData\mingw64\mingw32\bin",
              "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw32\bin",
              "C:\ProgramData\mingw32\bin",
              "C:\mingw32\bin"
            )
            
            $MINGW_FOUND = $false
            foreach ($path in $MINGW_PATHS) {
              if (Test-Path $path) {
                Write-Host "✅ Found MinGW 32-bit at: $path"
                echo "$path" >> $env:GITHUB_PATH
                $MINGW_FOUND = $true
                break
              }
            }
            
            if (-not $MINGW_FOUND) {
              Write-Host "Searching for MinGW 32-bit in ProgramData..."
              $found = Get-ChildItem "C:\ProgramData" -Recurse -Directory -Filter "mingw32" -ErrorAction SilentlyContinue | Where-Object { Test-Path "$($_.FullName)\bin\gcc.exe" } | Select-Object -First 1
              if ($found) {
                $mingwPath = "$($found.FullName)\bin"
                Write-Host "✅ Found MinGW 32-bit at: $mingwPath"
                echo "$mingwPath" >> $env:GITHUB_PATH
                $MINGW_FOUND = $true
              }
            }
            
            if (-not $MINGW_FOUND) {
              Write-Host "❌ MinGW 32-bit installation failed - could not find mingw32 directory"
              Write-Host "Listing C:\ProgramData contents:"
              Get-ChildItem "C:\ProgramData" -Directory | Select-Object Name
              exit 1
            }
          } else {
            Write-Host "Using default MinGW 64-bit"
            # MinGW 64-bit is usually pre-installed
          }

      - name: Install Windows dependencies
        shell: powershell
        run: |
          # Install wkhtmltopdf
          choco install -y wkhtmltopdf
          
          # Install OpenSSL via chocolatey (more reliable)
          Write-Host "Installing OpenSSL via Chocolatey..."
          
          if ("${{ matrix.arch }}" -eq "386") {
            # For 32-bit, we need to use a different approach
            Write-Host "Installing OpenSSL (will install 64-bit, but we'll handle libs separately)..."
            choco install -y openssl
            
            # Try to find and setup 32-bit libs
            # Note: Windows OpenSSL from chocolatey typically installs 64-bit
            # For 32-bit builds, we may need to compile or use pre-built libs
            Write-Host "⚠️ Note: 32-bit OpenSSL may require manual library setup"
          } else {
            # For 64-bit, straightforward chocolatey install
            choco install -y openssl
          }
          
          # Check common installation paths
          $OPENSSL_PATHS = @(
            "C:\Program Files\OpenSSL-Win64",
            "C:\Program Files\OpenSSL",
            "C:\OpenSSL-Win64",
            "C:\OpenSSL"
          )
          
          $OPENSSL_FOUND = $false
          $ACTUAL_OPENSSL_DIR = ""
          
          foreach ($path in $OPENSSL_PATHS) {
            if (Test-Path $path) {
              Write-Host "✅ Found OpenSSL at: $path"
              $ACTUAL_OPENSSL_DIR = $path
              $OPENSSL_FOUND = $true
              break
            }
          }
          
          if (-not $OPENSSL_FOUND) {
            Write-Host "❌ OpenSSL not found in common locations"
            Write-Host "Searching for OpenSSL..."
            
            # Search in Program Files
            $found = Get-ChildItem "C:\Program Files" -Directory -Filter "*OpenSSL*" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              $ACTUAL_OPENSSL_DIR = $found.FullName
              Write-Host "✅ Found OpenSSL at: $ACTUAL_OPENSSL_DIR"
              $OPENSSL_FOUND = $true
            }
          }
          
          if (-not $OPENSSL_FOUND) {
            Write-Host "❌ Failed to find OpenSSL installation"
            exit 1
          }
          
          # Create symlink/junction to expected location if needed
          if ($ACTUAL_OPENSSL_DIR -ne "${{ matrix.openssl_dir }}") {
            if (-not (Test-Path "${{ matrix.openssl_dir }}")) {
              Write-Host "Creating junction from ${{ matrix.openssl_dir }} to $ACTUAL_OPENSSL_DIR"
              New-Item -ItemType Junction -Path "${{ matrix.openssl_dir }}" -Target $ACTUAL_OPENSSL_DIR -Force | Out-Null
              Write-Host "✅ Junction created"
            }
          }
          
          # Verify installation
          if (Test-Path "${{ matrix.openssl_dir }}") {
            Write-Host "✅ OpenSSL ready at ${{ matrix.openssl_dir }}"
            Get-ChildItem "${{ matrix.openssl_dir }}" | Select-Object Name
          } else {
            Write-Host "❌ OpenSSL setup failed"
            exit 1
          }

      - name: Set up environment variables
        shell: powershell
        run: |
          # Set OpenSSL directory
          $OPENSSL_DIR = "${{ matrix.openssl_dir }}"
          
          if (-not (Test-Path "$OPENSSL_DIR")) {
            Write-Host "❌ OpenSSL directory not found: $OPENSSL_DIR"
            exit 1
          }
          
          Write-Host "✅ Found OpenSSL at: $OPENSSL_DIR"
          
          # Find lib directory structure based on architecture
          if ("${{ matrix.arch }}" -eq "386") {
            # For 32-bit, look for x86 libraries
            if (Test-Path "$OPENSSL_DIR/lib/VC/x86/MD") {
              $LIB_PATH = "$OPENSSL_DIR/lib/VC/x86/MD"
              Write-Host "✅ Using VC x86 lib path: $LIB_PATH"
            } elseif (Test-Path "$OPENSSL_DIR/lib/VC") {
              $LIB_PATH = "$OPENSSL_DIR/lib/VC"
              Write-Host "✅ Using VC lib path: $LIB_PATH"
            } elseif (Test-Path "$OPENSSL_DIR/lib") {
              $LIB_PATH = "$OPENSSL_DIR/lib"
              Write-Host "✅ Using standard lib path: $LIB_PATH"
            } else {
              Write-Host "❌ OpenSSL lib directory not found!"
              Write-Host "Directory contents:"
              Get-ChildItem -Path $OPENSSL_DIR -Recurse -Depth 2 | Select-Object FullName
              exit 1
            }
          } else {
            # For 64-bit, look for x64 libraries
            if (Test-Path "$OPENSSL_DIR/lib/VC/x64/MD") {
              $LIB_PATH = "$OPENSSL_DIR/lib/VC/x64/MD"
              Write-Host "✅ Using VC x64 lib path: $LIB_PATH"
            } elseif (Test-Path "$OPENSSL_DIR/lib/VC") {
              $LIB_PATH = "$OPENSSL_DIR/lib/VC"
              Write-Host "✅ Using VC lib path: $LIB_PATH"
            } elseif (Test-Path "$OPENSSL_DIR/lib") {
              $LIB_PATH = "$OPENSSL_DIR/lib"
              Write-Host "✅ Using standard lib path: $LIB_PATH"
            } else {
              Write-Host "❌ OpenSSL lib directory not found!"
              Write-Host "Directory contents:"
              Get-ChildItem -Path $OPENSSL_DIR -Recurse -Depth 2 | Select-Object FullName
              exit 1
            }
          }
          
          # Verify include directory
          if (-not (Test-Path "$OPENSSL_DIR/include/openssl")) {
            Write-Host "❌ OpenSSL include directory not found!"
            exit 1
          }
          Write-Host "✅ Found OpenSSL headers at: $OPENSSL_DIR/include"
          
          # Set environment variables
          echo "OPENSSL_DIR=$OPENSSL_DIR" >> $env:GITHUB_ENV
          echo "CGO_CFLAGS=-I$OPENSSL_DIR/include" >> $env:GITHUB_ENV
          echo "CGO_LDFLAGS=-L$LIB_PATH -lssl -lcrypto -lws2_32 -lcrypt32" >> $env:GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $env:GITHUB_ENV
          
          # Add to PATH
          echo "$OPENSSL_DIR/bin" >> $env:GITHUB_PATH
          echo "C:/Program Files/wkhtmltopdf/bin" >> $env:GITHUB_PATH
          
          Write-Host "`n=== Environment Configuration ==="
          Write-Host "Architecture: ${{ matrix.arch }}"
          Write-Host "GOARCH: ${{ matrix.goarch }}"
          Write-Host "OPENSSL_DIR: $OPENSSL_DIR"
          Write-Host "CGO_CFLAGS: -I$OPENSSL_DIR/include"
          Write-Host "CGO_LDFLAGS: -L$LIB_PATH -lssl -lcrypto -lws2_32 -lcrypt32"

      - name: Install Go dependencies
        run: |
          go mod download
          go mod tidy

      - name: Build GUI for Windows
        shell: powershell
        run: |
          $env:CGO_ENABLED = "1"
          $env:GOOS = "windows"
          $env:GOARCH = "${{ matrix.goarch }}"
          
          if ("${{ matrix.arch }}" -eq "386") {
            $OUTPUT_NAME = "build/ravro_dcrpt_gui-386.exe"
          } else {
            $OUTPUT_NAME = "build/ravro_dcrpt_gui.exe"
          }
          
          go build -ldflags="-s -w -H windowsgui" -o $OUTPUT_NAME ./cmd/gui

      - name: Copy runtime DLLs
        shell: powershell
        run: |
          # Create build directory if not exists
          New-Item -ItemType Directory -Force -Path build
          
          # Determine DLL suffix based on architecture
          if ("${{ matrix.arch }}" -eq "386") {
            $DLL_SUFFIX = "x86"
          } else {
            $DLL_SUFFIX = "x64"
          }
          
          # Copy OpenSSL DLLs from installed location
          $OPENSSL_BIN = "${{ matrix.openssl_dir }}\bin"
          if (Test-Path "$OPENSSL_BIN\libssl-3-${DLL_SUFFIX}.dll") {
            Copy-Item "$OPENSSL_BIN\libssl-3-${DLL_SUFFIX}.dll" build/
            Copy-Item "$OPENSSL_BIN\libcrypto-3-${DLL_SUFFIX}.dll" build/
            Write-Host "✅ Copied OpenSSL DLLs (${DLL_SUFFIX})"
          } elseif (Test-Path "$OPENSSL_BIN\libssl-3.dll") {
            Copy-Item "$OPENSSL_BIN\libssl-3.dll" build/
            Copy-Item "$OPENSSL_BIN\libcrypto-3.dll" build/
            Write-Host "✅ Copied OpenSSL DLLs (generic)"
          } else {
            Write-Host "⚠️ OpenSSL DLLs not found in $OPENSSL_BIN"
          }
          
          # Copy any local DLLs from lib/ if they exist
          if (Test-Path "lib\*.dll") {
            Copy-Item lib\*.dll build\
          }

      - name: Create zip archive
        shell: powershell
        run: |
          if ("${{ matrix.arch }}" -eq "386") {
            $EXE_NAME = "ravro_dcrpt_gui-386.exe"
            $ZIP_NAME = "ravro_dcrpt-windows-386.zip"
          } else {
            $EXE_NAME = "ravro_dcrpt_gui.exe"
            $ZIP_NAME = "ravro_dcrpt-windows-amd64.zip"
          }
          
          # Include all DLLs in build directory
          $files = @("build\$EXE_NAME")
          if (Test-Path "build\*.dll") {
            $files += Get-ChildItem "build\*.dll" | ForEach-Object { $_.FullName }
          }
          
          Compress-Archive -Path $files -DestinationPath "build\$ZIP_NAME" -Force

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-${{ matrix.arch }}
          path: build/ravro_dcrpt-windows-${{ matrix.arch }}.zip
          retention-days: 7

  create-release:
    name: Create GitHub Release
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/linux-amd64/*.tar.gz
            artifacts/macos-amd64/*.tar.gz
            artifacts/macos-arm64/*.tar.gz
            artifacts/windows-amd64/*.zip
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

